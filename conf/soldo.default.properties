################################################################################
# Copyright © 2020-2021    The Nxt Core Developers.                               #
# Copyright © 2016-2017 Jelurida IP B.V.                                       #
#                                                                              #
# See the LICENSE.txt file at the top-level directory of this distribution     #
# for licensing information.                                                   #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement with Jelurida B.V.,  #
# no part of the Nxt software, including this file, may be copied, modified,   #
# propagated, or distributed except according to the terms contained in the    #
# LICENSE.txt file.                                                            #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

# Do not modify this file. Instead, create a properties file with only the
# properties you need to change, and set them there. The values in
# properties override those in default.properties.



#### SYSTEM ####

# Set the socks proxy host.
#socksProxyHost=localhost

# Set the socks proxy port.
#socksProxyPort=9050





#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
soldo.shareMyAddress=

# Port for incoming peer to peer networking requests, if enabled.
soldo.peerServerPort=2274

# Enable UPnP for the peer port.
soldo.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
soldo.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
soldo.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
soldo.peerServerHost=127.0.0.1

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from soldo.peerServerPort (useful if you do port
# forwarding behind a router).
soldo.myAddress=

# My platform, to be announced to peers.
soldo.myPlatform=MyPltWer

# My hallmark, if available.
# soldo.myHallmark=

# Default initial peers. Only used if soldo.usePeersDb=true.
# Do not modify. Add custom peers to soldo.wellKnownPeers instead.
soldo.defaultPeers=14.13.18.8; 14.13.17.9;

# A list of well known peer addresses / host names, separated by '; '. These
# peers are always kept in connected state.
soldo.wellKnownPeers= 14.13.18.8; 14.13.17.9;

# Known bad peers to be blacklisted.
soldo.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if soldo.usePeersDb=true.
# Do not modify. Add custom testnet peers to soldo.testnetPeers instead.
soldo.defaultTestnetPeers=10.0.1.35

# Well known testnet peers.
soldo.testnetPeers=10.0.1.35

# Maximum number of inbound connections.
soldo.maxNumberOfInboundConnections=1000

# Maximum number of outbound connections.
soldo.maxNumberOfOutboundConnections=100

# Maintain active connections with at least that many peers.
soldo.maxNumberOfConnectedPublicPeers=40

# Stop adding new peers when number of known peers exceeds that many.
soldo.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
soldo.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
soldo.connectTimeout=1000

# Peer networking read timeout for outgoing connections.
soldo.readTimeout=2000

# Peer networking server idle timeout, milliseconds.
soldo.peerServerIdleTimeout=3000

# Use WebSocket connection if supported by the remote peer.
soldo.useWebSockets=true

# WebSocket connection idle timeout (milliseconds).
soldo.webSocketIdleTimeout=90000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
soldo.enableHallmarkProtection=false

# Hallmark threshold to use when sending data to peers.
soldo.pushThreshold=500000

# Hallmark threshold to use when requesting data from peers.
soldo.pullThreshold=500000

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
soldo.blacklistingPeriod=6000000

# Consider a new transaction or block sent after 10 peers have received it.
soldo.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
soldo.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
soldo.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6574 (peer networking), 6575 (UI) and 6576 (API) will
# be used.
soldo.isTestnet=false

# Save known peers in the database
soldo.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
soldo.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
soldo.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# soldo.shareMyAddress=false, soldo.wellKnownPeers=, soldo.testnetPeers=
# and soldo.usePeersDb=false, and if set to true overrides those properties.
soldo.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
soldo.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
soldo.cjdnsOnly=false

# Do not include exception details when returning error response to peers.
soldo.hideErrorDetails=false



#### API SERVER ####

# Accept http/json API requests.
soldo.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
soldo.allowedBotHosts=*

# Port for http/json API requests.
soldo.apiServerPort=2276

# Port for https/json API request. If same as soldo.apiServerPort, the soldo.apiSSL
# setting determines whether SSL is used or not.
soldo.apiServerSSLPort=2276

# Enable UPnP for the API ports.
soldo.enableAPIUPnP=true

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.
soldo.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
soldo.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
soldo.apiResourceBase=./html/ui

# Default page for the API server.
soldo.apiWelcomeFile=index.html

# Java API documentation directory, optional.
soldo.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
soldo.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
soldo.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set soldo.keyStorePath and
# soldo.keyStorePassword).
# Non-SSL connections will be disabled if soldo.apiServerSSLPort is equal to
# soldo.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
soldo.apiSSL=false

# Enable automatical use of self-signed certificate
# SSL will be enabled if soldo.apiServerHost=0.0.0.0
# SSL will not be enabled automatically if soldo.apiServerHost=127.0.0.1
# set to false to disable this feature
soldo.apiServerEnforceSSL=true

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#soldo.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
soldo.apiServerEnforcePOST=true

# Compress Http responses for the API server.
soldo.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when
# soldo.apiServerHost=127.0.0.1.
soldo.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
soldo.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
soldo.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
soldo.apiEventTimeout=300

# Maximum number of applications with active event registrations.
soldo.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#soldo.maxUploadFileSize=0

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeNQT=0 has
# been specified. Default is false.
soldo.correctInvalidFees=true

# APIs to disable, as a semicolon separated list.
soldo.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
soldo.disabledAPITags=

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
soldo.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see nxt.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
soldo.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
soldo.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
soldo.apiProxyBlacklistingPeriod=1800000

# When the API server is running behind a proxy, use this header to obtain the
# remote host for which the API request was forwarded. Currently only used for
# keeping track of and blacklisting hosts that try to brute force the API admin
# password.
#soldo.forwardedForHeader=X-Forwarded-For


#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
soldo.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to
# allow all.
soldo.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
soldo.uiServerPort=2275

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
soldo.uiServerHost=0.0.0.0

# Idle timeout for NRS user interface server, milliseconds.
soldo.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
soldo.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
soldo.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set soldo.keyStorePath and
# soldo.keyStorePassword).
soldo.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
soldo.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
soldo.log=soldo.log
# The log file is now specified in logging.properties.

# Enable debug log output.
soldo.debug=true
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
soldo.enableLogTraceback=true

# Enable logging of exception stack traces.
soldo.enableStackTraces=true

# Enable logging of Jetty messages.
soldo.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
soldo.communicationLoggingMask=1

# Track balances of the following accounts and related events for debugging
# purposes.
soldo.debugTraceAccounts=

# File name for logging tracked account balances.
soldo.debugTraceLog=

# Separator character for trace log.
soldo.debugTraceSeparator=\t

# Quote character for trace log.
soldo.debugTraceQuote="

# Log changes to unconfirmed balances.
soldo.debugLogUnconfirmed=true

#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The _db folder is expected to be in the current working directory, will be
# created if missing.
# soldo.dbUrl=jdbc:h2:./soldo_db/soldo;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
soldo.dbSoftMgUrl=jdbc:h2:./soldo_db/softMG;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# soldo.testDbUrl=jdbc:h2:./soldo_test_db/soldo;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

soldo.dbType=h2
soldo.testDbType=h2

soldo.dbDir=./soldo_db/soldo
soldo.testDbDir=./soldo_test_db/soldo

soldo.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
soldo.dbSoftMgParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
soldo.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

soldo.dbUsername=sa
soldo.dbSoftMgUsername=sa
soldo.testDbUsername=sa

soldo.dbPassword=sa
soldo.dbSoftMgPassword=sa
soldo.testDbPassword=sa

# Database connection timeout in seconds.
soldo.dbLoginTimeout=70

# Database default lock timeout in seconds.
soldo.dbDefaultLockTimeout=60

# Database max memory rows limit.
soldo.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
soldo.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
soldo.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
soldo.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
soldo.maxRollback=800

# When trimming is enabled, it is run every soldo.trimFrequency blocks.
soldo.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
soldo.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, soldo.maxPrunableLifetime must
# be -1 and soldo.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
soldo.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
soldo.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
soldo.transactionLogThreshold=15000

# Log the average transaction time after this many minutes.
soldo.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
soldo.enablePublicKeyCache=true



#### Blocks and transactions ####

# Maximum number of forging accounts allowed on this node.
soldo.maxNumberOfForgers=100

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
soldo.numberOfForkConfirmations=0
soldo.testnetNumberOfForkConfirmations=0

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
soldo.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
soldo.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
soldo.maxNumberOfMonitors=100



#### DESKTOP WALLET ####

# When using desktop mode and when user interface is available. Launch the wallet
# inside a desktop frame when the node is started.
soldo.launchDesktopApplication=false

# The default account is used, to automatically login to the wallet during startup
soldo.defaultDesktopAccount=


#### ACCOUNT LEDGER ####

# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
soldo.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
soldo.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
soldo.ledgerTrimKeep=30000

#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
soldo.peerServerDoSFilter.maxRequestsPerSec=30
soldo.peerServerDoSFilter.delayMs=1000
soldo.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
soldo.keyStorePath=keystore
soldo.keyStorePassword=password



#### Developers only ####

# Force re-validation of blocks and transaction at start.
soldo.forceValidate=false

# Force re-build of derived objects tables at start.
soldo.forceScan=false

# Stop blockchain download at this block
# soldo.maxBlockchainHeight=0

# Core version.
soldo.version=0.0.0.1

#### HierarchyAPI ####

# Process HierarchyAPI requests received only from localhost and reject others
# Recommended to be enabled
soldo.allowAPIHierarchyOnlyLocalhost=true

# Allow HierarchyAPI usage without admin password
# Recommended to be enabled if soldo.allowAPIHierarchyOnlyLocalhost is true
soldo.allowAPIHierarchyWithoutPassword=true

# Enable to get more detailed information about derived tables trimming process
soldo.measureTrimmingTime=false
